package bootstrapper

import (
	"fmt"
	"github.com/spf13/viper"
	"os"
	"runtime"
	"strings"
)

type Bootstrapper struct {
	Config *viper.Viper
	Directories []string
	Files []string
}

func (B Bootstrapper) GenerateDirectories() []error {
	var errs []error
	for _, v := range B.Directories {
		if err := os.MkdirAll(v, 0755); err != nil {
			errs = append(errs, err)
		}
	}
	if len(errs) != 0 {
		return errs
	}
	return nil
}

func (B Bootstrapper) GenerateFiles() []error {
	var errs []error
	for _, v := range B.Files {
		f, err := os.OpenFile(v, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
		if err != nil {
			errs = append(errs, err)
		}

		switch v {
		case fmt.Sprintf("%[1]s/cmd/%[1]s/cmd/cmd.go", B.Config.GetString("project.name")):
			if _, err := f.WriteString(cmdProjectCmdCmdGoContents); err != nil {
				errs = append(errs, err)
			}
		case fmt.Sprintf("%[1]s/pkg/%[1]s/%[1]s.go", B.Config.GetString("project.name")):
			if _, err := f.WriteString(fmt.Sprintf(pkgProjectProjectGoContents, B.Config.GetString("project.name"))); err != nil {
				errs = append(errs, err)
			}
		case fmt.Sprintf("%[1]s/.gitignore", B.Config.GetString("project.name")):
			if _, err := f.WriteString(gitignoreContents); err != nil {
				errs = append(errs, err)
			}
		case fmt.Sprintf("%[1]s/makefile", B.Config.GetString("project.name")):
			if _, err := f.WriteString(fmt.Sprintf(makefileContents, B.Config.GetString("project.name"))); err != nil {
				errs = append(errs, err)
			}
		case fmt.Sprintf("%[1]s/go.mod", B.Config.GetString("project.name")):
			if _, err := f.WriteString(fmt.Sprintf(
				goModContents,
				B.Config.GetString("project.name"),
				strings.TrimPrefix(strings.Join(strings.Split(runtime.Version(), ".")[:2], "."), "go"))); err != nil {
				errs = append(errs, err)
			}
		}
	}

	if len(errs) != 0 {
		return errs
	}
	return nil
}

func New(vCfg *viper.Viper) *Bootstrapper {
	B := &Bootstrapper{}
	B.Config = vCfg
	B.Directories = []string{
		fmt.Sprintf("%[1]s/cmd/%[1]s/cmd", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/pkg/internal/%[1]s", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/pkg/%[1]s", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/api", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/web", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/configs", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/init", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/scripts", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/test", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/docs", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/examples", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/bin", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/deployments", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/build", B.Config.GetString("project.name")),
	}

	B.Files = []string{
		fmt.Sprintf("%[1]s/cmd/%[1]s/cmd/cmd.go", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/pkg/%[1]s/%[1]s.go", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/.gitignore", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/makefile", B.Config.GetString("project.name")),
		fmt.Sprintf("%[1]s/go.mod", B.Config.GetString("project.name")),
	}

	return B
}

const (
	gitignoreContents string = `# File Generated by go-bootstrapper

# build and binaries files
bin/
build/

# code coverage files
*.out

# ide stuff
.vscode/
.idea/
.DS_Store
`

	makefileContents string = `all: test build

.PHONY: test
test:
	@go test -v -coverprofile=cover.out ./...

.PHONY: build
build:
	@go build -a -o bin/%[1]s cmd/%[1]s/cmd/cmd.go
`

	cmdProjectCmdCmdGoContents string = `package main

func main() {}
`

	pkgProjectProjectGoContents string = `package %s`

	goModContents string = `module changeme.org/awesomeUsername/%s

go %s
`
)